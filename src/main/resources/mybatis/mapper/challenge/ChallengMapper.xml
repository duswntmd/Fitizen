<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.sku.fitizen.mapper.challenge.ChallengeMapper">


    <!--챌린지 종료 시키기-->
    <update id="endChallenge">
    <![CDATA[
        UPDATE CHALLENGE
        SET ISENDED = 1
        WHERE ENDDATE < SYSDATE
          AND ISENDED = 0
        ]]>
    </update>

    <!--포인트 지급 되지않은 종료된 공식 챌린지 ids-->
    <select id="getEndedChallenges" resultType="Integer">

        SELECT CHALLENGEID
        FROM CHALLENGE
        WHERE ISENDED = 1
          AND ISREWARDED = 0
          AND ENTRYPOINT > 0
   </select>

    <select id="getPercentageForChallengesByUser" parameterType="java.util.List" resultType="com.sku.fitizen.Dto.SchedulerDTO">
        SELECT
        p.USERID,
        p.CHALLENGEID,
        pv.VERIFIED_COUNT AS "verifiedCount",
        c.PROOFCOUNT,
        ROUND(
        (NVL(pv.VERIFIED_COUNT, 0) / c.PROOFCOUNT) * 100, 2
        ) AS "percentage"
        FROM
        PARTICIPATION p
        JOIN
        CHALLENGE c ON p.CHALLENGEID = c.CHALLENGEID
        LEFT JOIN
        (
        SELECT
        pv.CHALLENGEID,
        psb.USERID,
        COUNT(psb.PROOFNUM) AS VERIFIED_COUNT  <!-- 인증 게시판 번호별 인증 횟수를 카운트 -->
        FROM
        PHOTOVERIFICATION pv
        JOIN
        PROOFSHOTBOARD psb ON pv.PROOFNUM = psb.PROOFNUM  <!-- 인증된 게시판 번호와 작성자(USERID) 연결 -->
        WHERE
        pv.CHALLENGEID = psb.CHALLENGEID  <!-- 해당 챌린지에 속하는 게시판 번호만 선택 -->
        GROUP BY
        pv.CHALLENGEID, psb.USERID  <!-- 각 사용자별로 인증된 횟수 계산 -->
        ) pv ON p.CHALLENGEID = pv.CHALLENGEID AND p.USERID = pv.USERID
        WHERE
        p.CHALLENGEID IN
        <foreach item="item" collection="ids" open="(" separator="," close=")">
            #{item}  <!-- 공식 챌린지 번호들에 대해서만 처리 -->
        </foreach>
    </select>


    <!--포인트 지급-->

    <insert id="insertRewards" parameterType="java.util.List">
        INSERT INTO REWARDS (REWARDID,USERID, CHALLENGEID, REWARDPOINTS, REWARDDATE)
        VALUES
        <foreach collection="list" item="reward" separator=",">
            (REWARD_SEQ.nextval,#{reward.userId}, #{reward.challengeId}, #{reward.rewardPoints}, SYSDATE)
        </foreach>
    </insert>

    <!--챌린지 포인트 지급됨 처리 -->
    <update id="updatePointGranted" parameterType="java.util.List">
        UPDATE CHALLENGE
        SET ISREWARDED = 1
        WHERE CHALLENGEID IN
        <foreach item="item" collection="ids" open="(" separator="," close=")">
            #{item}
        </foreach>
    </update>

    <!-- 챌린지 등록 -->
    <insert id="saveChallenge" parameterType="com.sku.fitizen.domain.challenge.Challenge">
        <!-- 시퀀스를 사용하여 챌린지 ID를 가져오기 -->
        <selectKey keyProperty="challengeId" resultType="int" order="BEFORE">
            SELECT CHALL_SEQ.NEXTVAL FROM DUAL
        </selectKey>
        <!-- 등록 -->
        INSERT INTO challenge (challengeId, TITLE, COVERIMG,UCOVERIMG, STARTDATE, ENDDATE, LIMITUSER, CONTENT, CREATORID,WEEK,PROOFCOUNT,PROOFDAYS,CATEGORYID,ENTRYPOINT)
        VALUES (#{challengeId}, #{title},#{coverImg},#{uCoverImg}, #{startDate}, #{endDate}, #{limitUser}, #{content}, #{creatorId},#{week},#{proofCount},#{proofDays},#{categoryId},#{entryPoint})
    </insert>

    <!--관리자 챌린지 : 공식 챌린지 -->
    <select id="getChallengesByAdmin" resultType="com.sku.fitizen.domain.challenge.Challenge">
        SELECT *
        FROM challenge c
        WHERE c.creatorId IN (
            SELECT username
            FROM authorities
            WHERE authority = 'ROLE_ADMIN'
        )
    </select>

    <!--챌린지 카테고리들-->
    <select id="getChallCategories" resultType="com.sku.fitizen.domain.challenge.ChallCategory">
        SELECT * FROM  CHALLCATEGORY
    </select>

    <!-- 특정 카테고리에 속해있는 챌린지 -->
    <select id="getChallByCategory" parameterType="Integer" resultType="com.sku.fitizen.domain.challenge.Challenge">
        SELECT * FROM  CHALLENGE
        WHERE CATEGORYID =#{categoryId}
    </select>


    <!-- top3 챌린지 -->

    <select id="getTop3Challenge" resultType="com.sku.fitizen.domain.challenge.Challenge">
        <![CDATA[
        SELECT * FROM (
                          SELECT *
                          FROM CHALLENGE
                          WHERE members < limitUser
                          ORDER BY members DESC, challengeId
                      ) WHERE ROWNUM <= 3
        ]]>
    </select>



    <!--전체 챌린지 목록 조회 -->
    <select id="getChallengeList"  resultType="com.sku.fitizen.domain.challenge.Challenge">
           SELECT *FROM  challenge
    </select>

    <!-- 카테고리별 챌린지 목록 조회
    <select id="getCategoryByChallenges" resultMap="joinMap">
        SELECT
            c.CATEGORYID AS categoryId,
            c.CATEGORYNAME AS categoryName,
            ch.CHALLENGEID AS challengeId,
            ch.TITLE AS title,
            ch.COVERIMG AS coverImg,
            ch.UCOVERIMG AS uCoverImg,
            ch.STARTDATE AS startDate,
            ch.ENDDATE AS endDate,
            ch.LIMITUSER AS limitUser,
            ch.CREATORID AS creatorId,
            ch.CONTENT AS content,
            ch.MEMBERS AS members,
            ch.WEEK AS week,
            ch.PROOFCOUNT AS proofCount,
            ch.PROOFDAYS AS proofDays
        FROM
            CHALLCATEGORY c
                LEFT JOIN
            CHALLENGE ch ON c.CATEGORYID = ch.CATEGORYID
        ORDER BY
            c.CATEGORYID
    </select>

    <resultMap id="joinMap" type="com.sku.fitizen.domain.challenge.ChallCategory">
        <id property="categoryId" column="categoryId"/>
        <result property="categoryName" column="categoryName"/>
        <collection property="challenges" ofType="com.sku.fitizen.domain.challenge.Challenge">
            <id property="challengeId" column="challengeId"/>
            <result property="title" column="title"/>
            <result property="coverImg" column="coverImg"/>
            <result property="uCoverImg" column="uCoverImg"/>
            <result property="startDate" column="startDate"/>
            <result property="endDate" column="endDate"/>
            <result property="limitUser" column="limitUser"/>
            <result property="creatorId" column="creatorId"/>
            <result property="content" column="content"/>
            <result property="members" column="members"/>
            <result property="week" column="week"/>
            <result property="proofCount" column="proofCount"/>
            <result property="proofDays" column="proofDays"/>
        </collection>
    </resultMap>
-->

    <select id="searchChallenges"
            resultType="com.sku.fitizen.domain.challenge.Challenge"
            parameterType="map">
        SELECT * FROM CHALLENGE

        <where>  <!-- CONCAT 함수는 두 개의 인수만 허용-->
            <if test= "searchType.equalsIgnoreCase('title')">        AND LOWER(title) LIKE LOWER(CONCAT('%' || #{keyword}, '%')) </if>

            <if  test= "searchType.equalsIgnoreCase('creatorId')" >  AND LOWER(creatorId)=LOWER(#{keyword})</if>

            <if test="searchType.equalsIgnoreCase('content')" >      AND LOWER(content) LIKE LOWER(CONCAT('%' || #{keyword},'%'))</if>

        </where>
    </select>




    <!-- 챌린지 참여자 등록   챌린지를 등록한 사람도 참여자에 포함된다  -->
    <insert id="addCreatorToParticipation" parameterType="com.sku.fitizen.domain.challenge.Participation">
                INSERT  INTO participation
                VALUES (#{userId},#{challengeId},SYSDATE)
    </insert>

    <!--챌린지 고유 아이디로 조회 : 챌린지 상세정보 보기 위해-->
    <select id="getChallengeById" parameterType="Integer" resultType="com.sku.fitizen.domain.challenge.Challenge">

            SELECT * FROM challenge WHERE CHALLENGEID =#{id}
    </select>

    <!--챌린지 참여 등록  조건: 하나의 챌린지에 중복 참여 불가 -->

    <insert id="participate" parameterType="com.sku.fitizen.domain.challenge.Participation">
        INSERT INTO  participation (USERID, CHALLENGEID, JOINDATE)
        VALUES (#{userId} ,#{challengeId},SYSDATE)
    </insert>

    <!--챌린지 참여자 수 증가  -->
    <update id="increaseMembers" parameterType="com.sku.fitizen.domain.challenge.Challenge">
        UPDATE challenge SET members=members+1
        WHERE challengeId=#{challengeId}
    </update>

    <!--챌린지 참여자 수 감소 -->
    <update id="decreaseMembers" parameterType="Integer">
        update CHALLENGE SET MEMBERS=MEMBERS-1
        WHERE CHALLENGEID=#{challengId}
    </update>

    <!--내가 참여한 챌린지 목록 불러오기-->
    <select id="getMyChallengeList" parameterType="com.sku.fitizen.domain.challenge.Challenge"
            resultType="com.sku.fitizen.domain.challenge.Challenge">
        SELECT
            c.*,
            COALESCE(pv.VERIFIED_COUNT, 0) AS verifiedCount
        FROM
            CHALLENGE c
                LEFT JOIN (
                SELECT
                    pv.CHALLENGEID,
                    COUNT(pv.PROOFNUM) AS VERIFIED_COUNT
                FROM
                    PHOTOVERIFICATION pv
                GROUP BY
                    pv.CHALLENGEID
            ) pv ON c.CHALLENGEID = pv.CHALLENGEID
        WHERE
            c.CHALLENGEID IN (
                SELECT DISTINCT p.CHALLENGEID
                FROM PARTICIPATION p
                WHERE p.USERID = #{userId}
            )
    </select>

    <!--내가 작성한 챌린지-->
    <select id="getChallengeCreatedByMe" parameterType="string" resultType="com.sku.fitizen.domain.challenge.Challenge">
        SELECT *FROM  CHALLENGE WHERE CREATORID=#{userId}
    </select>


    <!--종료 날짜가 오늘이 챌린지 아이디 리스트 -->
    <select id="getChallengesEndingToday" resultType="java.lang.Integer">
        SELECT challengeId
        FROM Challenge
        WHERE TRUNC(endDate) = TRUNC(SYSDATE)
    </select>


    <!-- 여러 테이블에서 이미지 파일 이름과 소스를 가져오는 쿼리 -->
    <select id="getImageList" resultMap="imageResultMap" parameterType="Integer">
        SELECT 'challenge' AS source, UCOVERIMG AS image_filename
        FROM challenge
        WHERE CHALLENGEID = #{challengeId}

        UNION ALL

        SELECT 'chat_message' AS source, UIMG AS image_filename
        FROM MESSAGE
        WHERE ROOMID = #{challengeId}

        UNION ALL

        SELECT 'proofShot' AS source, UPHOTO AS image_filename
        FROM PROOFSHOTBOARD
        WHERE CHALLENGEID= #{challengeId}
    </select>

    <!-- resultMap을 이용하여 Map 형태로 반환 -->
    <resultMap id="imageResultMap" type="java.util.HashMap">
        <result property="source" column="source"/>
        <result property="image_filename" column="image_filename"/>
    </resultMap>

    <!--챌린지 삭제-->
<delete id="deleteChallenge" parameterType="Integer" >
    DELETE FROM CHALLENGE WHERE CHALLENGEID =#{challengeId}
</delete>

    <select id="isOfficial" parameterType="int" resultType="int">
        SELECT CASE
                   WHEN entryPoint > 0 THEN entryPoint
                   ELSE 0
                   END AS is_official
        FROM CHALLENGE
        WHERE challengeId = #{challengeId}
    </select>


</mapper>




